<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

	<context:component-scan base-package="com.spring.biz" />
	
	
	
	<aop:aspectj-autoproxy /> <!-- 어노테이션으로 객체화 할거야 -->
	
	<!-- <bean id="logAdvice" class="com.spring.biz.common.AroundAdvice" />  -->
	<!-- <bean id="afterReturningAdvice" class="com.spring.biz.common.AfterReturning" /> -->
	<!-- <bean id="afterThrowingAdvice" class="com.spring.biz.common.AfterThrowingAdvice" /> -->
	
	<!-- <bean id="logAdvice" class="com.spring.biz.common.LogAdvice" /> -->
  <!--  <aop:config>
      <aop:pointcut expression="execution(* com.spring.biz..*Impl.*(..))" id="aPointCut"/> 핵심로직으로 얘를 준비했어
      <aop:pointcut expression="execution(* com.spring.biz..*Impl.select*(..))" id="bPointCut"/> 이와 같이 두개로 나누어 호출할 수 있음
      <aop:aspect ref="logAdvice"> 얘가 호출되면
      	<aop:before method="printLog" pointcut-ref="aPointCut"/> printLog 라는 메소드를 실행해줘
      	<aop:before method="printLog" pointcut-ref="bPointCut"/>
      	<aop:around method="aroundPrintLog" pointcut-ref="bPointCut"/> 
      	<aop:after-throwing method="afterThrowingAdvice" pointcut-ref="aPointCut" throwing="exceptObj"/>
      	<aop:after-returning method="afterReturningAdvice" pointcut-ref="bPointCut" returning="returnObj"/>
      	<aop:around method="aroundPrintLog" pointcut-ref="aPointCut"/>
      </aop:aspect>
   </aop:config> -->

</beans>
